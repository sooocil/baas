"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.abstractServiceFactory = void 0;
var common_1 = require("../common");
var decorators_1 = require("../decorators");
var build_query_1 = require("./build-query");
var decorators_2 = require("./decorators");
function abstractServiceFactory(model) {
    var injectedRepositoryName = "".concat((0, common_1.lowerCaseFirst)(model.name), "Repository");
    var propertyRepositoryName = "__".concat(injectedRepositoryName, "__");
    var AbstractService_ = /** @class */ (function () {
        function AbstractService_(container) {
            this.__container__ = container;
            this[propertyRepositoryName] = container[injectedRepositoryName];
        }
        AbstractService_.retrievePrimaryKeys = function (entity) {
            var _a, _b, _c, _d;
            return ((_d = (_b = (_a = entity.meta) === null || _a === void 0 ? void 0 : _a.primaryKeys) !== null && _b !== void 0 ? _b : (_c = entity.prototype.__meta) === null || _c === void 0 ? void 0 : _c.primaryKeys) !== null && _d !== void 0 ? _d : ["id"]);
        };
        AbstractService_.prototype.retrieve = function (primaryKeyValues, config, sharedContext) {
            if (config === void 0) { config = {}; }
            if (sharedContext === void 0) { sharedContext = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var primaryKeys, primaryKeysCriteria, queryOptions, entities;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            primaryKeys = AbstractService_.retrievePrimaryKeys(model);
                            if (!(0, common_1.isDefined)(primaryKeyValues)) {
                                throw new common_1.MedusaError(common_1.MedusaError.Types.NOT_FOUND, "".concat(primaryKeys.length === 1
                                    ? "\"".concat((0, common_1.lowerCaseFirst)(model.name) + (0, common_1.upperCaseFirst)(primaryKeys[0]), "\"")
                                    : "".concat((0, common_1.lowerCaseFirst)(model.name), " ").concat(primaryKeys.join(", ")), " must be defined"));
                            }
                            primaryKeysCriteria = {};
                            if (primaryKeys.length === 1) {
                                primaryKeysCriteria[primaryKeys[0]] = primaryKeyValues;
                            }
                            else {
                                primaryKeysCriteria = primaryKeyValues.map(function (primaryKeyValue) { return ({
                                    $and: primaryKeys.map(function (key) {
                                        var _a;
                                        return (_a = {}, _a[key] = primaryKeyValue[key], _a);
                                    }),
                                }); });
                            }
                            queryOptions = (0, build_query_1.buildQuery)(primaryKeysCriteria, config);
                            return [4 /*yield*/, this[propertyRepositoryName].find(queryOptions, sharedContext)];
                        case 1:
                            entities = _a.sent();
                            if (!(entities === null || entities === void 0 ? void 0 : entities.length)) {
                                throw new common_1.MedusaError(common_1.MedusaError.Types.NOT_FOUND, "".concat(model.name, " with ").concat(primaryKeys.join(", "), ": ").concat(Array.isArray(primaryKeyValues)
                                    ? primaryKeyValues.map(function (v) {
                                        return [(0, common_1.isString)(v) ? v : Object.values(v)].join(", ");
                                    })
                                    : primaryKeyValues, " was not found"));
                            }
                            return [2 /*return*/, entities[0]];
                    }
                });
            });
        };
        AbstractService_.prototype.list = function (filters, config, sharedContext) {
            if (filters === void 0) { filters = {}; }
            if (config === void 0) { config = {}; }
            if (sharedContext === void 0) { sharedContext = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var queryOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            queryOptions = (0, build_query_1.buildQuery)(filters, config);
                            return [4 /*yield*/, this[propertyRepositoryName].find(queryOptions, sharedContext)];
                        case 1: return [2 /*return*/, (_a.sent())];
                    }
                });
            });
        };
        AbstractService_.prototype.listAndCount = function (filters, config, sharedContext) {
            if (filters === void 0) { filters = {}; }
            if (config === void 0) { config = {}; }
            if (sharedContext === void 0) { sharedContext = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var queryOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            queryOptions = (0, build_query_1.buildQuery)(filters, config);
                            return [4 /*yield*/, this[propertyRepositoryName].findAndCount(queryOptions, sharedContext)];
                        case 1: return [2 /*return*/, (_a.sent())];
                    }
                });
            });
        };
        AbstractService_.prototype.create = function (data, sharedContext) {
            if (sharedContext === void 0) { sharedContext = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this[propertyRepositoryName].create(data, sharedContext)];
                        case 1: return [2 /*return*/, (_a.sent())];
                    }
                });
            });
        };
        AbstractService_.prototype.update = function (data, sharedContext) {
            if (sharedContext === void 0) { sharedContext = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this[propertyRepositoryName].update(data, sharedContext)];
                        case 1: return [2 /*return*/, (_a.sent())];
                    }
                });
            });
        };
        AbstractService_.prototype.delete = function (primaryKeyValues, sharedContext) {
            if (sharedContext === void 0) { sharedContext = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this[propertyRepositoryName].delete(primaryKeyValues, sharedContext)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AbstractService_.prototype.softDelete = function (idsOrFilter, sharedContext) {
            if (sharedContext === void 0) { sharedContext = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this[propertyRepositoryName].softDelete(idsOrFilter, sharedContext)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        AbstractService_.prototype.restore = function (idsOrFilter, sharedContext) {
            if (sharedContext === void 0) { sharedContext = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this[propertyRepositoryName].restore(idsOrFilter, sharedContext)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        AbstractService_.prototype.upsert = function (data, sharedContext) {
            if (sharedContext === void 0) { sharedContext = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this[propertyRepositoryName].upsert(data, sharedContext)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        __decorate([
            (0, decorators_2.InjectManager)(propertyRepositoryName),
            __param(2, (0, decorators_1.MedusaContext)()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Object, Object]),
            __metadata("design:returntype", Promise)
        ], AbstractService_.prototype, "retrieve", null);
        __decorate([
            (0, decorators_2.InjectManager)(propertyRepositoryName),
            __param(2, (0, decorators_1.MedusaContext)()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Object, Object]),
            __metadata("design:returntype", Promise)
        ], AbstractService_.prototype, "list", null);
        __decorate([
            (0, decorators_2.InjectManager)(propertyRepositoryName),
            __param(2, (0, decorators_1.MedusaContext)()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Object, Object]),
            __metadata("design:returntype", Promise)
        ], AbstractService_.prototype, "listAndCount", null);
        __decorate([
            (0, decorators_2.InjectTransactionManager)(common_1.shouldForceTransaction, propertyRepositoryName),
            __param(1, (0, decorators_1.MedusaContext)()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Array, Object]),
            __metadata("design:returntype", Promise)
        ], AbstractService_.prototype, "create", null);
        __decorate([
            (0, decorators_2.InjectTransactionManager)(common_1.shouldForceTransaction, propertyRepositoryName),
            __param(1, (0, decorators_1.MedusaContext)()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Array, Object]),
            __metadata("design:returntype", Promise)
        ], AbstractService_.prototype, "update", null);
        __decorate([
            (0, decorators_2.InjectTransactionManager)(common_1.doNotForceTransaction, propertyRepositoryName),
            __param(1, (0, decorators_1.MedusaContext)()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Array, Object]),
            __metadata("design:returntype", Promise)
        ], AbstractService_.prototype, "delete", null);
        __decorate([
            (0, decorators_2.InjectTransactionManager)(propertyRepositoryName),
            __param(1, (0, decorators_1.MedusaContext)()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Object]),
            __metadata("design:returntype", Promise)
        ], AbstractService_.prototype, "softDelete", null);
        __decorate([
            (0, decorators_2.InjectTransactionManager)(propertyRepositoryName),
            __param(1, (0, decorators_1.MedusaContext)()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Object]),
            __metadata("design:returntype", Promise)
        ], AbstractService_.prototype, "restore", null);
        __decorate([
            (0, decorators_2.InjectTransactionManager)(propertyRepositoryName),
            __param(1, (0, decorators_1.MedusaContext)()),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Array, Object]),
            __metadata("design:returntype", Promise)
        ], AbstractService_.prototype, "upsert", null);
        return AbstractService_;
    }());
    return AbstractService_;
}
exports.abstractServiceFactory = abstractServiceFactory;
//# sourceMappingURL=abstract-service-factory.js.map