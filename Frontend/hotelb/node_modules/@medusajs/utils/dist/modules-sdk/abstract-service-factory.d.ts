import { Context, FindConfig, FilterQuery as InternalFilterQuery } from "@medusajs/types";
/**
 * Utility factory and interfaces for internal module services
 */
type FilterableMethods = "list" | "listAndCount";
type Methods = "create" | "update";
export interface AbstractService<TEntity extends {}, TContainer extends object = object, TDTOs extends {
    [K in Methods]?: any;
} = {
    [K in Methods]?: any;
}, TFilters extends {
    [K in FilterableMethods]?: any;
} = {
    [K in FilterableMethods]?: any;
}> {
    get __container__(): TContainer;
    retrieve<TEntityMethod = TEntity>(id: string, config?: FindConfig<TEntityMethod>, sharedContext?: Context): Promise<TEntity>;
    list<TEntityMethod = TEntity>(filters?: TFilters["list"], config?: FindConfig<TEntityMethod>, sharedContext?: Context): Promise<TEntity[]>;
    listAndCount<TEntityMethod = TEntity>(filters?: TFilters["listAndCount"], config?: FindConfig<TEntityMethod>, sharedContext?: Context): Promise<[TEntity[], number]>;
    create(data: TDTOs["create"][], sharedContext?: Context): Promise<TEntity[]>;
    update(data: TDTOs["update"][], sharedContext?: Context): Promise<TEntity[]>;
    delete(primaryKeyValues: string[] | object[], sharedContext?: Context): Promise<void>;
    softDelete(idsOrFilter: string[] | InternalFilterQuery, sharedContext?: Context): Promise<[TEntity[], Record<string, unknown[]>]>;
    restore(idsOrFilter: string[] | InternalFilterQuery, sharedContext?: Context): Promise<[TEntity[], Record<string, unknown[]>]>;
    upsert(data: (TDTOs["create"] | TDTOs["update"])[], sharedContext?: Context): Promise<TEntity[]>;
}
export declare function abstractServiceFactory<TContainer extends object = object, TDTOs extends {
    [K in Methods]?: any;
} = {
    [K in Methods]?: any;
}, TFilters extends {
    [K in FilterableMethods]?: any;
} = {
    [K in FilterableMethods]?: any;
}>(model: new (...args: any[]) => any): {
    new <TEntity extends object = any>(container: TContainer): AbstractService<TEntity, TContainer, TDTOs, TFilters>;
};
export {};
